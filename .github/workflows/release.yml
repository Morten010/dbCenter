name: Build and Publish

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.16.0
          cache: 'npm'

      # Step to clean up node_modules and package-lock.json
      - name: Clean install dependencies
        run: |
          rm -rf node_modules
          rm -f package-lock.json
        shell: bash # This step will run on macOS only

      # Install dependencies for macOS
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: npm install
        shell: bash

      # Install dependencies for Windows
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: npm install
        shell: pwsh

      # Rebuild native modules for macOS
      - name: Rebuild native modules (macOS)
        if: runner.os == 'macOS'
        run: npm rebuild
        shell: bash

      # Rebuild native modules for Windows
      - name: Rebuild native modules (Windows)
        if: runner.os == 'Windows'
        run: npm rebuild
        shell: pwsh

      - name: Build the project (macOS)
        if: runner.os == 'macOS'
        run: npm run build
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Build the project (Windows)
        if: runner.os == 'Windows'
        run: npm run build
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Package and Publish (macOS)
        if: runner.os == 'macOS'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npx electron-builder --mac --publish always
        shell: bash

      - name: Package and Publish (Windows)
        if: runner.os == 'Windows'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npx electron-builder --win --publish always
        shell: pwsh

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create a release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
